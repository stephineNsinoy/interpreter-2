//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\USER\Documents\programming languages\interpreter-2\interpreter\Grammar\Code.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace interpreter.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, BEGIN_CODE=24, 
		END_CODE=25, INT=26, FLOAT=27, STRING=28, BOOL=29, CHAR=30, IDENTIFIER=31, 
		COMMENT=32, BLANK_LINE=33, WS=34, BEGIN_IF=35, END_IF=36, WHILE=37, BEGIN_WHILE=38, 
		END_WHILE=39, SCAN=40, LOGICAL_OPERATOR=41;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "BEGIN_CODE", "END_CODE", 
		"INT", "FLOAT", "STRING", "BOOL", "CHAR", "IDENTIFIER", "COMMENT", "BLANK_LINE", 
		"WS", "BEGIN_IF", "END_IF", "WHILE", "BEGIN_WHILE", "END_WHILE", "SCAN", 
		"LOGICAL_OPERATOR"
	};


	public SimpleLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'IF'", "'('", "')'", "'ELSE'", "':'", "'NOT'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'&'", "'=='", "'<>'", "'>'", "'<'", 
		"'>='", "'<='", "'['", "']'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'WHILE'", null, null, "'SCAN:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BEGIN_CODE", "END_CODE", "INT", "FLOAT", "STRING", "BOOL", "CHAR", "IDENTIFIER", 
		"COMMENT", "BLANK_LINE", "WS", "BEGIN_IF", "END_IF", "WHILE", "BEGIN_WHILE", 
		"END_WHILE", "SCAN", "LOGICAL_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2+\x134\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x6"+
		"\x1B\xA3\n\x1B\r\x1B\xE\x1B\xA4\x3\x1C\x6\x1C\xA8\n\x1C\r\x1C\xE\x1C\xA9"+
		"\x3\x1C\x3\x1C\x6\x1C\xAE\n\x1C\r\x1C\xE\x1C\xAF\x3\x1D\x3\x1D\a\x1D\xB4"+
		"\n\x1D\f\x1D\xE\x1D\xB7\v\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\xBC\n\x1D\f\x1D"+
		"\xE\x1D\xBF\v\x1D\x3\x1D\x5\x1D\xC2\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\xD1\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \a \xD9\n \f \xE \xDC\v"+
		" \x3!\x3!\a!\xE0\n!\f!\xE!\xE3\v!\x3!\x3!\x3\"\a\"\xE8\n\"\f\"\xE\"\xEB"+
		"\v\"\x3\"\x5\"\xEE\n\"\x3\"\x3\"\x3#\x6#\xF3\n#\r#\xE#\xF4\x3#\x3#\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x133\n*\x2\x2\x2+\x3\x2\x3\x5\x2"+
		"\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2"+
		"\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$"+
		"G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+\x3\x2\r\x3\x2\x32;\x3\x2$$\x3\x2"+
		"))\x5\x2\f\f\xF\xF))\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61"+
		"\x63|\x4\x2\f\f\xF\xF\x4\x2\v\v\"\"\x3\x2\xF\xF\x3\x2\f\f\x5\x2\v\v\xF"+
		"\xF\"\"\x141\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31"+
		"\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2"+
		"\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2"+
		"\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2"+
		"\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3"+
		"\x2\x2\x2\x2S\x3\x2\x2\x2\x3U\x3\x2\x2\x2\x5W\x3\x2\x2\x2\aY\x3\x2\x2"+
		"\x2\t[\x3\x2\x2\x2\v^\x3\x2\x2\x2\r`\x3\x2\x2\x2\xF\x62\x3\x2\x2\x2\x11"+
		"g\x3\x2\x2\x2\x13i\x3\x2\x2\x2\x15m\x3\x2\x2\x2\x17o\x3\x2\x2\x2\x19q"+
		"\x3\x2\x2\x2\x1Bs\x3\x2\x2\x2\x1Du\x3\x2\x2\x2\x1Fw\x3\x2\x2\x2!y\x3\x2"+
		"\x2\x2#|\x3\x2\x2\x2%\x7F\x3\x2\x2\x2\'\x81\x3\x2\x2\x2)\x83\x3\x2\x2"+
		"\x2+\x86\x3\x2\x2\x2-\x89\x3\x2\x2\x2/\x8B\x3\x2\x2\x2\x31\x8D\x3\x2\x2"+
		"\x2\x33\x98\x3\x2\x2\x2\x35\xA2\x3\x2\x2\x2\x37\xA7\x3\x2\x2\x2\x39\xC1"+
		"\x3\x2\x2\x2;\xD0\x3\x2\x2\x2=\xD2\x3\x2\x2\x2?\xD6\x3\x2\x2\x2\x41\xDD"+
		"\x3\x2\x2\x2\x43\xE9\x3\x2\x2\x2\x45\xF2\x3\x2\x2\x2G\xF8\x3\x2\x2\x2"+
		"I\x101\x3\x2\x2\x2K\x108\x3\x2\x2\x2M\x10E\x3\x2\x2\x2O\x11A\x3\x2\x2"+
		"\x2Q\x124\x3\x2\x2\x2S\x132\x3\x2\x2\x2UV\a=\x2\x2V\x4\x3\x2\x2\x2WX\a"+
		".\x2\x2X\x6\x3\x2\x2\x2YZ\a?\x2\x2Z\b\x3\x2\x2\x2[\\\aK\x2\x2\\]\aH\x2"+
		"\x2]\n\x3\x2\x2\x2^_\a*\x2\x2_\f\x3\x2\x2\x2`\x61\a+\x2\x2\x61\xE\x3\x2"+
		"\x2\x2\x62\x63\aG\x2\x2\x63\x64\aN\x2\x2\x64\x65\aU\x2\x2\x65\x66\aG\x2"+
		"\x2\x66\x10\x3\x2\x2\x2gh\a<\x2\x2h\x12\x3\x2\x2\x2ij\aP\x2\x2jk\aQ\x2"+
		"\x2kl\aV\x2\x2l\x14\x3\x2\x2\x2mn\a,\x2\x2n\x16\x3\x2\x2\x2op\a\x31\x2"+
		"\x2p\x18\x3\x2\x2\x2qr\a\'\x2\x2r\x1A\x3\x2\x2\x2st\a-\x2\x2t\x1C\x3\x2"+
		"\x2\x2uv\a/\x2\x2v\x1E\x3\x2\x2\x2wx\a(\x2\x2x \x3\x2\x2\x2yz\a?\x2\x2"+
		"z{\a?\x2\x2{\"\x3\x2\x2\x2|}\a>\x2\x2}~\a@\x2\x2~$\x3\x2\x2\x2\x7F\x80"+
		"\a@\x2\x2\x80&\x3\x2\x2\x2\x81\x82\a>\x2\x2\x82(\x3\x2\x2\x2\x83\x84\a"+
		"@\x2\x2\x84\x85\a?\x2\x2\x85*\x3\x2\x2\x2\x86\x87\a>\x2\x2\x87\x88\a?"+
		"\x2\x2\x88,\x3\x2\x2\x2\x89\x8A\a]\x2\x2\x8A.\x3\x2\x2\x2\x8B\x8C\a_\x2"+
		"\x2\x8C\x30\x3\x2\x2\x2\x8D\x8E\a\x44\x2\x2\x8E\x8F\aG\x2\x2\x8F\x90\a"+
		"I\x2\x2\x90\x91\aK\x2\x2\x91\x92\aP\x2\x2\x92\x93\x3\x2\x2\x2\x93\x94"+
		"\a\x45\x2\x2\x94\x95\aQ\x2\x2\x95\x96\a\x46\x2\x2\x96\x97\aG\x2\x2\x97"+
		"\x32\x3\x2\x2\x2\x98\x99\aG\x2\x2\x99\x9A\aP\x2\x2\x9A\x9B\a\x46\x2\x2"+
		"\x9B\x9C\x3\x2\x2\x2\x9C\x9D\a\x45\x2\x2\x9D\x9E\aQ\x2\x2\x9E\x9F\a\x46"+
		"\x2\x2\x9F\xA0\aG\x2\x2\xA0\x34\x3\x2\x2\x2\xA1\xA3\t\x2\x2\x2\xA2\xA1"+
		"\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2"+
		"\x2\xA5\x36\x3\x2\x2\x2\xA6\xA8\t\x2\x2\x2\xA7\xA6\x3\x2\x2\x2\xA8\xA9"+
		"\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2"+
		"\x2\xAB\xAD\a\x30\x2\x2\xAC\xAE\t\x2\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF"+
		"\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\x38\x3\x2\x2"+
		"\x2\xB1\xB5\a$\x2\x2\xB2\xB4\n\x3\x2\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3"+
		"\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2"+
		"\xB7\xB5\x3\x2\x2\x2\xB8\xC2\a$\x2\x2\xB9\xBD\a)\x2\x2\xBA\xBC\n\x4\x2"+
		"\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE"+
		"\x3\x2\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC2\a)\x2\x2"+
		"\xC1\xB1\x3\x2\x2\x2\xC1\xB9\x3\x2\x2\x2\xC2:\x3\x2\x2\x2\xC3\xC4\a$\x2"+
		"\x2\xC4\xC5\aV\x2\x2\xC5\xC6\aT\x2\x2\xC6\xC7\aW\x2\x2\xC7\xC8\aG\x2\x2"+
		"\xC8\xD1\a$\x2\x2\xC9\xCA\a$\x2\x2\xCA\xCB\aH\x2\x2\xCB\xCC\a\x43\x2\x2"+
		"\xCC\xCD\aN\x2\x2\xCD\xCE\aU\x2\x2\xCE\xCF\aG\x2\x2\xCF\xD1\a$\x2\x2\xD0"+
		"\xC3\x3\x2\x2\x2\xD0\xC9\x3\x2\x2\x2\xD1<\x3\x2\x2\x2\xD2\xD3\a)\x2\x2"+
		"\xD3\xD4\n\x5\x2\x2\xD4\xD5\a)\x2\x2\xD5>\x3\x2\x2\x2\xD6\xDA\t\x6\x2"+
		"\x2\xD7\xD9\t\a\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8"+
		"\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB@\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2"+
		"\xDD\xE1\a%\x2\x2\xDE\xE0\n\b\x2\x2\xDF\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2"+
		"\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3"+
		"\xE1\x3\x2\x2\x2\xE4\xE5\b!\x2\x2\xE5\x42\x3\x2\x2\x2\xE6\xE8\t\t\x2\x2"+
		"\xE7\xE6\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3"+
		"\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEE\t\n\x2\x2\xED"+
		"\xEC\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\t\v\x2"+
		"\x2\xF0\x44\x3\x2\x2\x2\xF1\xF3\t\f\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF4"+
		"\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3\x2\x2"+
		"\x2\xF6\xF7\b#\x2\x2\xF7\x46\x3\x2\x2\x2\xF8\xF9\a\x44\x2\x2\xF9\xFA\a"+
		"G\x2\x2\xFA\xFB\aI\x2\x2\xFB\xFC\aK\x2\x2\xFC\xFD\aP\x2\x2\xFD\xFE\x3"+
		"\x2\x2\x2\xFE\xFF\aK\x2\x2\xFF\x100\aH\x2\x2\x100H\x3\x2\x2\x2\x101\x102"+
		"\aG\x2\x2\x102\x103\aP\x2\x2\x103\x104\a\x46\x2\x2\x104\x105\x3\x2\x2"+
		"\x2\x105\x106\aK\x2\x2\x106\x107\aH\x2\x2\x107J\x3\x2\x2\x2\x108\x109"+
		"\aY\x2\x2\x109\x10A\aJ\x2\x2\x10A\x10B\aK\x2\x2\x10B\x10C\aN\x2\x2\x10C"+
		"\x10D\aG\x2\x2\x10DL\x3\x2\x2\x2\x10E\x10F\a\x44\x2\x2\x10F\x110\aG\x2"+
		"\x2\x110\x111\aI\x2\x2\x111\x112\aK\x2\x2\x112\x113\aP\x2\x2\x113\x114"+
		"\x3\x2\x2\x2\x114\x115\aY\x2\x2\x115\x116\aJ\x2\x2\x116\x117\aK\x2\x2"+
		"\x117\x118\aN\x2\x2\x118\x119\aG\x2\x2\x119N\x3\x2\x2\x2\x11A\x11B\aG"+
		"\x2\x2\x11B\x11C\aP\x2\x2\x11C\x11D\a\x46\x2\x2\x11D\x11E\x3\x2\x2\x2"+
		"\x11E\x11F\aY\x2\x2\x11F\x120\aJ\x2\x2\x120\x121\aK\x2\x2\x121\x122\a"+
		"N\x2\x2\x122\x123\aG\x2\x2\x123P\x3\x2\x2\x2\x124\x125\aU\x2\x2\x125\x126"+
		"\a\x45\x2\x2\x126\x127\a\x43\x2\x2\x127\x128\aP\x2\x2\x128\x129\a<\x2"+
		"\x2\x129R\x3\x2\x2\x2\x12A\x12B\a\x43\x2\x2\x12B\x12C\aP\x2\x2\x12C\x133"+
		"\a\x46\x2\x2\x12D\x12E\aQ\x2\x2\x12E\x133\aT\x2\x2\x12F\x130\aP\x2\x2"+
		"\x130\x131\aQ\x2\x2\x131\x133\aV\x2\x2\x132\x12A\x3\x2\x2\x2\x132\x12D"+
		"\x3\x2\x2\x2\x132\x12F\x3\x2\x2\x2\x133T\x3\x2\x2\x2\x10\x2\xA4\xA9\xAF"+
		"\xB5\xBD\xC1\xD0\xDA\xE1\xE9\xED\xF4\x132\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace interpreter.Grammar
